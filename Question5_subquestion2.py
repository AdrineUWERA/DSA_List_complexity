import random  # Module to allow us to generate random characters
import timeit  # Module to help us track the runtime of the function
import string  # Module to help us access ASCII lowercase and uppercase constants when generating random strings
import numpy as np  # Module to help us get the best fit line of the graph and calculate its gradient
import matplotlib.pyplot as plt  # help us to plot the graph


# Function to convert a string to lower case
def convert_to_lowercase(my_string):
    string_list = list(my_string)  # Converts the string into a list of characters
    return_string = ""  # initialize string to be returned by the function
    for letter in string_list:  # iterates through every character of the string
        return_string += letter.lower()  # append each character after turning it into lower case

    return return_string  # returns the original string but now in lower case


size_array = []  # contains the sizes of all strings that will be generated by the program
runtime_array = []  # Contains all the runtimes of the strings in the program


# Iterates through the numbers from 1 to 100000 and increment by 20000 after each iteration to determine the string sizes
for string_size in range(1, 100000, 20000):
    # initializing all the ASCII uppercase constants to a variable
    letters = string.ascii_uppercase
    # Generating a random uppercase characters to form a string of size (string_size) ie. the value of the index in the outer loop
    mystring = ''.join(random.choices(letters, k=string_size))
    start_time = timeit.default_timer()  # Capturing the start time
    # Calling the function to convert to lower case and passing the randomly generated string
    print(f"Lowercase string: {convert_to_lowercase(mystring)}")
    end_time = timeit.default_timer()  # Capturing the end time
    runtime = end_time - start_time  # Calculating the runtime
    size_array.append(string_size)  # appending the size of the string under iteration to the size_array
    runtime_array.append(runtime)  # appending the runtime of the string under iteration to the runtime_array
    print(f"List size: {string_size} --> Runtime: {runtime}")


# plotting the runtime against the string size
plt.plot(size_array, runtime_array)

# naming the x axis
plt.xlabel('Input size')
# naming the y axis
plt.ylabel('Time')

# giving a title to my graph
plt.title('Graph')

x = np.array(size_array)  # creating an array of all the values on the x axis
y = np.array(runtime_array)  # creating an array of all the values on the y axis

# find line of best fit, the method will output the best fit line's gradient (a) and the y-intercept(b)
a, b = np.polyfit(x, y, 1)

# add points to plot
plt.scatter(x, y)

# add line of best fit to plot
plt.plot(x, a*x+b)

print(f"\nGradient: {a}")  # Prints the gradient of the graph's best fit line

x = 1000000  # the input size to estimate runtime for
# Calculates the estimated runtime for input size 1000000 using by taking the product of the best fit line's gradient
# and the input size since our program has linear time complexity a*x+b, and we will ignore the constant
time_complexity = a * x
print(f"Runtime when input size = 1000000 is {time_complexity} seconds")

# function to show the plot
plt.show()